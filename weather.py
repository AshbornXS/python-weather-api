import os
import requests
from flask import Flask, request

app = Flask(__name__)

# Dicion√°rio de √≠cones para condi√ß√µes clim√°ticas
WEATHER_ICONS = {
    "c√©u limpo": "Óåç",
    "algumas nuvens": "Óª∞",
    "nuvens dispersas": "ÓÆ™",
    "nublado": "ÓÆ™",
    "chuva leve": "Óåñ",
    "chuva forte": "Óåò",
    "trovoadas": "Óåú",
    "neve": "Óåö",
    "n√©voa": "Óåì",
    "nublado encoberto": "ÓÆ™",
    "chuva moderada": "Óåñ",
}

# URL base da API do OpenWeatherMap
OPENWEATHERMAP_API_URL = "http://api.openweathermap.org/data/2.5/weather"

@app.route('/weather', methods=['GET'])
def get_weather():
    """
    Endpoint para obter informa√ß√µes clim√°ticas de uma cidade espec√≠fica.
    Retorna as informa√ß√µes em formato de texto.
    """
    api_key = request.args.get('key', default='', type=str)
    city = request.args.get('city', default='', type=str)

    # Valida√ß√£o dos par√¢metros
    if not api_key or not city:
        return "Erro: Chave da API e cidade s√£o obrigat√≥rios.", 400

    try:
        # Faz a requisi√ß√£o √† API do OpenWeatherMap
        response = requests.get(
            OPENWEATHERMAP_API_URL,
            params={
                "q": city,
                "appid": api_key,
                "units": "metric",
                "lang": "pt_br"
            }
        )
        response.raise_for_status()  # Lan√ßa uma exce√ß√£o para c√≥digos de status HTTP 4xx/5xx
        data = response.json()

        # Extrai informa√ß√µes do JSON
        weather_description = data['weather'][0]['description']
        temp = int(data['main']['temp'])

        # Obt√©m o √≠cone correspondente √† condi√ß√£o clim√°tica
        weather_icon = WEATHER_ICONS.get(weather_description, "üåà")

        # Formata a resposta em texto
        weather_info = f"Current weather:{weather_description} {weather_icon}  {temp}¬∞Cend1"
        return weather_info

    except requests.exceptions.RequestException as e:
        # Trata erros de requisi√ß√£o
        return f"Erro ao buscar dados clim√°ticos: {str(e)}", 500
    except KeyError as e:
        # Trata erros de chave ausente no JSON
        return f"Erro no formato da resposta: {str(e)}", 500

if __name__ == '__main__':
    # Configura√ß√µes do Flask
    app.run(host='0.0.0.0', port=8089, debug=os.getenv('FLASK_DEBUG', 'False') == 'True')
